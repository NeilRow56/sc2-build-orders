// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  image         String
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  builds        Build[] 
  comments      Comment[]
  
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Build {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  matchUp String?
  content String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  comments      Comment[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message     String
  buildId    String  @db.ObjectId
  userId    String  @db.ObjectId
  createdAt DateTime @default(now())
  build      Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])
}
